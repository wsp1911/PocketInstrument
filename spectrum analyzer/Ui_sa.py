# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'e:\Project\Python\PocketInstrument\analyzer\va.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys, os

sys.path.append(os.getcwd())

from PyQt5 import QtCore, QtGui, QtWidgets
from public.public import logSpinBox, doubleSlider
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure


# class Myplot for plotting with matplotlib
class Myplot(FigureCanvas):
    def __init__(self, parent=None, width=5, height=3, dpi=100):
        # new figure
        self.fig = Figure(figsize=(width, height), dpi=dpi)
        FigureCanvas.__init__(self, self.fig)
        self.setParent(parent)

        # 主窗口
        d1, d2, d = 0.05, 0.05, 0.1
        self.ax = self.fig.add_axes([d1, d2, 1 - 2 * d1 - d, 1 - 2 * d2])

        self.ax1 = self.fig.add_axes([1 - d, 0, d, 1])
        self.init_ax(self.ax1)

        font_color, font_size = "white", 15

        y1, y2, dy = 0.95, 0.9, 0.1
        self.fixed_text = {
            "f1": self.ax1.text(0, y1, "f1/Hz", c=font_color, fontsize=font_size),
            "f2": self.ax1.text(0, y1 - dy, "f2/Hz", c=font_color, fontsize=font_size),
            "Y1": self.ax1.text(
                0, y1 - 2 * dy, "Y1/dB", c=font_color, fontsize=font_size
            ),
            "Y2": self.ax1.text(
                0, y1 - 3 * dy, "Y2/dB", c=font_color, fontsize=font_size
            ),
            "df": self.ax1.text(
                0, y1 - 4 * dy, r"$\Delta$f/Hz", c=font_color, fontsize=font_size
            ),
            "dY": self.ax1.text(
                0, y1 - 5 * dy, r"$\Delta$Y/dB", c=font_color, fontsize=font_size
            ),
        }

        self.data = {
            "f1": self.ax1.text(
                1,
                y2,
                "0",
                c=font_color,
                fontsize=font_size,
                horizontalalignment="right",
            ),
            "f2": self.ax1.text(
                1,
                y2 - dy,
                "0",
                c=font_color,
                fontsize=font_size,
                horizontalalignment="right",
            ),
            "Y1": self.ax1.text(
                1,
                y2 - 2 * dy,
                "0",
                c=font_color,
                fontsize=font_size,
                horizontalalignment="right",
            ),
            "Y2": self.ax1.text(
                1,
                y2 - 3 * dy,
                "0",
                c=font_color,
                fontsize=font_size,
                horizontalalignment="right",
            ),
            "df": self.ax1.text(
                1,
                y2 - 4 * dy,
                "0",
                c=font_color,
                fontsize=font_size,
                horizontalalignment="right",
            ),
            "dY": self.ax1.text(
                1,
                y2 - 5 * dy,
                "0",
                c=font_color,
                fontsize=font_size,
                horizontalalignment="right",
            ),
        }

        for i in range(9):
            self.ax1.axhline(y=0.1 * (i + 1), c="gray")

        # initial figure
        self.compute_initial_figure()

        # size policy
        FigureCanvas.setSizePolicy(
            self, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding
        )
        FigureCanvas.updateGeometry(self)

    def init_ax(self, ax):
        ax.set_xlim((0, 1))
        ax.set_ylim((0, 1))
        ax.set_xticks([])
        ax.set_yticks([])

    def compute_initial_figure(self):
        pass


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.desktop = QtWidgets.QApplication.desktop()

        # 获取显示器分辨率大小
        self.screenRect = self.desktop.screenGeometry()
        WIDTH = int(0.8 * self.screenRect.width())
        HEIGHT = int(0.7 * self.screenRect.height())

        sliderW, sliderH = 54, 54
        funcW, funcH = 300, 600
        winW, winH = WIDTH - funcW - sliderW, HEIGHT - sliderH

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(WIDTH + 40, HEIGHT + 40)
        MainWindow.setFont(QtGui.QFont("宋体", 14))
        MainWindow.setWindowTitle("示波器")

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.FigQGB = QtWidgets.QGroupBox(self.centralwidget)
        self.FigQGB.setObjectName("FigQGB")
        self.FigQGB.setGeometry(QtCore.QRect(0, 0, winW, winH))

        self.fig = Myplot(width=5, height=5, dpi=100)

        self.FigGrid = QtWidgets.QGridLayout(self.FigQGB)
        self.FigGrid.setObjectName("FigGrid")
        self.FigGrid.addWidget(self.fig)

        self.HSliderQGB = QtWidgets.QGroupBox(self.centralwidget)
        self.HSliderQGB.setObjectName("HSliderQGB")
        self.HSliderQGB.setGeometry(QtCore.QRect(0, winH, winW, sliderH))

        self.CursorX = []
        self.CursorX.append(doubleSlider())
        self.CursorX[0].setOrientation(QtCore.Qt.Horizontal)
        self.CursorX[0].setObjectName("CursorX0")

        self.CursorX.append(doubleSlider())
        self.CursorX[1].setOrientation(QtCore.Qt.Horizontal)
        self.CursorX[1].setObjectName("CursorX1")

        self.HSliderGrid = QtWidgets.QVBoxLayout(self.HSliderQGB)
        self.HSliderGrid.setObjectName("HSliderGrid")
        self.HSliderGrid.addWidget(self.CursorX[0])
        self.HSliderGrid.addWidget(self.CursorX[1])

        self.VSliderQGB = QtWidgets.QGroupBox(self.centralwidget)
        self.VSliderQGB.setObjectName("HSliderQGB")
        self.VSliderQGB.setGeometry(QtCore.QRect(winW, 0, sliderW, winH))

        self.CursorY = []
        self.CursorY.append(doubleSlider())
        self.CursorY[0].setOrientation(QtCore.Qt.Vertical)
        self.CursorY[0].setObjectName("CursorY0")

        self.CursorY.append(doubleSlider())
        self.CursorY[1].setOrientation(QtCore.Qt.Vertical)
        self.CursorY[1].setObjectName("CursorY1")

        self.VSliderGrid = QtWidgets.QHBoxLayout(self.VSliderQGB)
        self.VSliderGrid.setObjectName("VSliderGrid")
        self.VSliderGrid.addWidget(self.CursorY[0])
        self.VSliderGrid.addWidget(self.CursorY[1])

        self.FuncQGB = QtWidgets.QGroupBox(self.centralwidget)
        self.FuncQGB.setObjectName("FuncQGB")
        self.FuncQGB.setGeometry(QtCore.QRect(winW + sliderW, 0, funcW, funcH))

        self.RunButton = QtWidgets.QPushButton()
        self.RunButton.setObjectName("RunButton")

        self.SourceLabel = QtWidgets.QLabel()
        self.SourceLabel.setObjectName("SourceLabel")
        self.SourceLabel.setText("源")
        self.Source = QtWidgets.QComboBox()
        self.Source.setObjectName("Source")
        self.Source.addItems(("1", "2"))

        self.WinLabel = QtWidgets.QLabel()
        self.WinLabel.setObjectName("WinLabel")
        self.WinLabel.setText("窗类型")
        self.WinSelect = QtWidgets.QComboBox()
        self.WinSelect.setObjectName("WinSelect")
        self.WinSelect.addItems(("矩形窗", "汉明窗"))

        self.fftNLabel = QtWidgets.QLabel()
        self.fftNLabel.setObjectName("fftNLabel")
        self.fftNLabel.setText("N")
        self.fftN = logSpinBox()
        self.fftN.setObjectName("fftN")
        self.fftN.setDecimals(0)
        self.fftN.setRange(1, 16384)
        self.fftN.setSingleStep(2)
        self.fftN.setValue(2048)

        self.RangeLabel = [
            QtWidgets.QLabel(),
            QtWidgets.QLabel(),
        ]
        self.RangeInput = [
            QtWidgets.QDoubleSpinBox(),
            QtWidgets.QDoubleSpinBox(),
        ]
        self.RangeLabel[0].setObjectName("RangeLabel0")
        self.RangeLabel[0].setText("fmin")
        self.RangeInput[0].setObjectName("RangeInput0")
        self.RangeInput[0].setRange(0, 22050)
        self.RangeInput[0].setSingleStep(1000)
        self.RangeInput[0].setValue(0)
        self.RangeLabel[1].setObjectName("RangeLabel1")
        self.RangeLabel[1].setText("fmax")
        self.RangeInput[1].setObjectName("RangeInput1")
        self.RangeInput[1].setRange(0, 22050)
        self.RangeInput[1].setSingleStep(1000)
        self.RangeInput[1].setValue(22050)

        self.FuncGrid = QtWidgets.QGridLayout(self.FuncQGB)
        self.FuncGrid.setObjectName("FuncGrid")
        self.FuncGrid.addWidget(self.RunButton, 0, 1)
        self.FuncGrid.addWidget(self.SourceLabel, 1, 0)
        self.FuncGrid.addWidget(self.Source, 1, 1)
        self.FuncGrid.addWidget(self.WinLabel, 2, 0)
        self.FuncGrid.addWidget(self.WinSelect, 2, 1)
        self.FuncGrid.addWidget(self.fftNLabel, 3, 0)
        self.FuncGrid.addWidget(self.fftN, 3, 1)
        self.FuncGrid.addWidget(self.RangeLabel[0], 4, 0)
        self.FuncGrid.addWidget(self.RangeInput[0], 4, 1)
        self.FuncGrid.addWidget(self.RangeLabel[1], 5, 0)
        self.FuncGrid.addWidget(self.RangeInput[1], 5, 1)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "示波器"))
        self.RunButton.setText(_translate("MainWindow", "Stop"))
        self.RunButton.setStyleSheet("background-color: red;")


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
