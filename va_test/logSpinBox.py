# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'e:\Project\Python\PocketInstrument\va_test\sliderTest.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSlot
from PyQt5.QtWidgets import QAbstractSpinBox


class logSpinBox2(QAbstractSpinBox):
    def __init__(self, parent=None):
        super(logSpinBox2, self).__init__(parent)

        self.__mi = 0
        self.__ma = 100
        self.__singleStep = 2
        self.__decimal = 2
        self.__val = 1

        self.__validator = QtGui.QDoubleValidator()
        self.__validator.setRange(self.__mi, self.__ma, self.__decimal)
        self.lineEdit().setValidator(self.__validator)

    def stepEnabled(self):
        if self.__val == self.__mi:
            return QAbstractSpinBox.StepUpEnabled
        elif self.__val == self.__ma:
            return QAbstractSpinBox.StepDownEnabled
        elif self.__val < self.__mi or self.__val > self.__ma:
            return QAbstractSpinBox.StepNone
        else:
            return QAbstractSpinBox.StepUpEnabled | QAbstractSpinBox.StepDownEnabled

    def stepBy(self, steps):
        self.lineEdit().setText(str(self.__val * self.__singleStep ** steps))

    def setValue(self, val):
        self.__val = val
        self.lineEdit().setText(str(val))

    def value(self):
        return self.__val

    def setSingleStep(self, step):
        self.__step = step

    def singleStep(self):
        return self.__step

    def setMinimum(self, mi):
        self.__mi = mi
        self.__validator.setBottom(mi)
        self.lineEdit().setValidator(self.__validator)

    def minimum(self):
        return self.__mi

    def setMaximum(self, ma):
        self.__ma = ma
        self.__validator.setTop(ma)
        self.lineEdit().setValidator(self.__validator)

    def maximum(self):
        return self.__ma

    def setDecimals(self, decimal):
        self.__decimal = decimal
        self.__validator.setDecimals(decimal)
        self.lineEdit().setValidator(self.__validator)

    def stepUp(self):
        v = self.__step * self.__val
        if v <= self.__ma:
            self.__val = v
        else:
            self.__val = self.__ma
        self.lineEdit().setText(str(self.__val))

    def stepDown(self):
        v = self.__val / self.__step
        if v >= self.__mi:
            self.__val = v
        else:
            self.__val = self.__mi
        self.lineEdit().setText(str(self.__val))


class logSpinBox1(QtWidgets.QDoubleSpinBox):
    def __init__(self, parent=None):
        super(logSpinBox1, self).__init__(parent)

    def stepBy(self, steps):
        if steps == 1 and self.value() * self.singleStep() <= self.maximum():
            self.setValue(self.value() * self.singleStep())
        elif steps == -1 and self.value() / self.singleStep() >= self.minimum():
            self.setValue(self.value() / self.singleStep())


class logSpinBox(QtWidgets.QLineEdit):
    def __init__(self, parent=None):
        super(logSpinBox, self).__init__(parent)

        self.__upButton = QtWidgets.QPushButton(self.parentWidget())
        self.__upButton.setText("▲")
        self.__upButton.setFont(QtGui.QFont("宋体", 5))
        self.__upButton.clicked.connect(self.stepUp)

        self.__downButton = QtWidgets.QPushButton(self.parentWidget())
        self.__downButton.setText("▼")
        self.__downButton.setFont(QtGui.QFont("宋体", 5))
        self.__downButton.clicked.connect(self.stepDown)

        self.__mi = 0
        self.__ma = 100
        self.__singleStep = 1
        self.__decimal = 2
        self.__val = 1

        self.__validator = QtGui.QDoubleValidator()
        self.__validator.setRange(self.__mi, self.__ma, self.__decimal)
        self.setValidator(self.__validator)

    def setGeometry(self, Rect):
        width = int(0.1 * Rect.width())
        height = Rect.height() // 2
        minW = 25
        width = minW if width < minW else width
        # height = minL if height < minL else height

        super(logSpinBox, self).setGeometry(
            QtCore.QRect(Rect.x(), Rect.y(), Rect.width(), Rect.height())
        )

        self.__upButton.setGeometry(
            QtCore.QRect(
                Rect.x() + Rect.width() - width - 1, Rect.y() + 1, width, height
            )
        )

        self.__downButton.setGeometry(
            QtCore.QRect(
                Rect.x() + Rect.width() - width - 1,
                Rect.y() + Rect.height() - 1 - height,
                width,
                height,
            )
        )

    def setObjectName(self, name):
        super(logSpinBox, self).setObjectName(name)
        self.__upButton.setObjectName(name + "_upButton")
        self.__downButton.setObjectName(name + "_downButton")

    def setValue(self, val):
        self.__val = val
        self.setText(str(val))

    def value(self):
        return self.__val

    def setSingleStep(self, step):
        self.__step = step

    def singleStep(self):
        return self.__step

    def setMinimum(self, mi):
        self.__mi = mi
        self.__validator.setBottom(mi)
        self.setValidator(self.__validator)

    def minimum(self):
        return self.__mi

    def setMaximum(self, ma):
        self.__ma = ma
        self.__validator.setTop(ma)
        self.setValidator(self.__validator)

    def maximum(self):
        return self.__ma

    def setDecimals(self, decimal):
        self.__decimal = decimal
        self.__validator.setDecimals(decimal)
        self.setValidator(self.__validator)

    def stepUp(self):
        v = self.__step * self.__val
        if v <= self.__ma:
            self.__val = v
        else:
            self.__val = self.__ma
        self.setText(str(self.__val))

    def stepDown(self):
        v = self.__val / self.__step
        if v >= self.__mi:
            self.__val = v
        else:
            self.__val = self.__mi
        self.setText(str(self.__val))

    def on_textChanged(self):
        pass


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.ZoomInput = logSpinBox(self.centralwidget)
        self.ZoomInput.setGeometry(QtCore.QRect(0, 0, 800, 100))
        self.ZoomInput.setSingleStep(2)
        self.ZoomInput.setObjectName("ZoomInput")
        self.ZoomInput.setValue(1)
        self.ZoomInput.setMinimum(0.01)
        self.ZoomInput.setMaximum(20)

        self.ZoomInput.textChanged.connect(self.on_text_changed)

        self.ZoomInput1 = logSpinBox1(self.centralwidget)
        self.ZoomInput1.setGeometry(QtCore.QRect(0, 200, 800, 100))
        self.ZoomInput1.setSingleStep(2)
        self.ZoomInput1.setObjectName("ZoomInput_1")
        self.ZoomInput1.setValue(1)
        self.ZoomInput1.setMinimum(0.01)
        self.ZoomInput1.setMaximum(20)

        self.ZoomInput2 = logSpinBox2(self.centralwidget)
        self.ZoomInput2.setGeometry(QtCore.QRect(0, 400, 800, 100))
        self.ZoomInput2.setSingleStep(2)
        self.ZoomInput2.setObjectName("ZoomInput_2")
        self.ZoomInput2.setValue(1)
        self.ZoomInput2.setMinimum(0.01)
        self.ZoomInput2.setMaximum(20)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def on_text_changed(self):
        print("text changed")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    a = logSpinBox2()
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
