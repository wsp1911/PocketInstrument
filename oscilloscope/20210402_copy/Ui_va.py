# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'e:\Project\Python\PocketInstrument\analyzer\va.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys, os

sys.path.append(os.getcwd())
from PyQt5 import QtCore, QtGui, QtWidgets
from public.public import logSpinBox, doubleSlider
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure


class Myplot(FigureCanvas):
    def __init__(self, parent=None, width=5, height=3, dpi=100):
        # new figure
        self.fig = Figure(figsize=(width, height), dpi=dpi)
        FigureCanvas.__init__(self, self.fig)
        self.setParent(parent)

        # 主窗口
        pos = [0.02, 0, 0.88, 0.97]
        self.ax = self.fig.add_axes(pos)

        # 显示每格刻度
        upper_H = 0.03
        upper_pos = [0, 1 - upper_H, 1, upper_H]
        self.ax_upper = self.fig.add_axes(upper_pos)
        self.init_ax(self.ax_upper)

        # 显示GND
        left_pos = [0, pos[1], 0.02, pos[3]]
        self.ax_left = self.fig.add_axes(left_pos)
        self.init_ax(self.ax_left)

        # 显示测量数据
        right_pos = [
            pos[0] + pos[2],
            pos[1],
            1 - pos[0] - pos[2],
            pos[3],
        ]
        self.ax_right = self.fig.add_axes(right_pos)
        self.init_ax(self.ax_right)

        # 两通道颜色
        self.c = ["#ffff00", "#00ff00"]

        font_size = 15

        y = [0.05 * i for i in range(21)]
        self.fixed_text = {
            "1": self.ax_upper.text(0, 0, "1", c=self.c[0], fontsize=font_size),
            "2": self.ax_upper.text(0.3, 0, "2", c=self.c[1], fontsize=font_size),
            "X1": self.ax_right.text(0, y[13], "X1/ms", c="white", fontsize=font_size),
            "X2": self.ax_right.text(0, y[11], "X2/ms", c="white", fontsize=font_size),
            "Y1": self.ax_right.text(0, y[9], "Y1/V", c="white", fontsize=font_size),
            "Y2": self.ax_right.text(0, y[7], "Y2/V", c="white", fontsize=font_size),
            "dX": self.ax_right.text(
                0, y[5], r"$\Delta$X/ms", c="white", fontsize=font_size
            ),
            "1/dX": self.ax_right.text(
                0, y[3], "1/" + r"$\Delta$X/Hz", c="white", fontsize=font_size
            ),
            "dY": self.ax_right.text(
                0, y[1], r"$\Delta$Y/V", c="white", fontsize=font_size
            ),
        }

        self.data = {
            "1": self.ax_upper.text(0.02, 0, "0", fontsize=font_size),
            "2": self.ax_upper.text(0.32, 0, "0", fontsize=font_size),
            "t": self.ax_upper.text(0.8, 0, "0", fontsize=font_size),
            "X1": self.ax_right.text(
                1,
                y[12],
                "0",
                c="white",
                fontsize=font_size,
                horizontalalignment="right",
            ),
            "X2": self.ax_right.text(
                1,
                y[10],
                "0",
                c="white",
                fontsize=font_size,
                horizontalalignment="right",
            ),
            "Y1": self.ax_right.text(
                1, y[8], "0", c="white", fontsize=font_size, horizontalalignment="right"
            ),
            "Y2": self.ax_right.text(
                1, y[6], "0", c="white", fontsize=font_size, horizontalalignment="right"
            ),
            "dX": self.ax_right.text(
                1, y[4], "0", c="white", fontsize=font_size, horizontalalignment="right"
            ),
            "1/dX": self.ax_right.text(
                1, y[2], "0", c="white", fontsize=font_size, horizontalalignment="right"
            ),
            "dY": self.ax_right.text(
                1, y[0], "0", c="white", fontsize=font_size, horizontalalignment="right"
            ),
        }

        for i in range(2, 20, 2):
            self.ax_right.axhline(y=y[i], c="gray")

        # initial figure
        self.compute_initial_figure()

        # size policy
        FigureCanvas.setSizePolicy(
            self, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding
        )
        FigureCanvas.updateGeometry(self)

    def init_ax(self, ax):
        ax.set_xlim((0, 1))
        ax.set_ylim((0, 1))
        ax.set_xticks([])
        ax.set_yticks([])

    def compute_initial_figure(self):
        pass


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.desktop = QtWidgets.QApplication.desktop()

        # 获取显示器分辨率大小
        self.screenRect = self.desktop.screenGeometry()
        WIDTH = int(0.9 * self.screenRect.width())
        HEIGHT = int(0.7 * self.screenRect.height())

        sliderW, sliderH = 81, 54
        funcW, funcH = int(WIDTH * 0.2), 700
        # funcW, funcH = 450, 1000
        winW, winH = WIDTH - sliderW - funcW, HEIGHT - sliderH

        self.font_size = 12

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(WIDTH + 40, HEIGHT + 40)
        MainWindow.setFont(QtGui.QFont("宋体", self.font_size))
        MainWindow.setWindowTitle("示波器")

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.FigQGB = QtWidgets.QGroupBox(self.centralwidget)
        self.FigQGB.setGeometry(QtCore.QRect(0, 0, winW, winH))
        self.FigQGB.setObjectName("FigQGB")

        self.fig = Myplot(width=5, height=5, dpi=100)

        self.FigGrid = QtWidgets.QGridLayout(self.FigQGB)
        self.FigGrid.setObjectName("FigGrid")
        self.FigGrid.addWidget(self.fig)

        self.HSliderQGB = QtWidgets.QGroupBox(self.centralwidget)
        self.HSliderQGB.setObjectName("HSliderQGB")
        self.HSliderQGB.setGeometry(QtCore.QRect(0, winH, winW, sliderH))

        self.CursorX = []
        self.CursorX.append(doubleSlider())
        self.CursorX[0].setOrientation(QtCore.Qt.Horizontal)
        self.CursorX[0].setObjectName("CursorX0")

        self.CursorX.append(doubleSlider())
        self.CursorX[1].setOrientation(QtCore.Qt.Horizontal)
        self.CursorX[1].setObjectName("CursorX1")

        self.HSliderGrid = QtWidgets.QVBoxLayout(self.HSliderQGB)
        self.HSliderGrid.setObjectName("HSliderGrid")
        self.HSliderGrid.addWidget(self.CursorX[0])
        self.HSliderGrid.addWidget(self.CursorX[1])

        self.VSliderQGB = QtWidgets.QGroupBox(self.centralwidget)
        self.VSliderQGB.setObjectName("HSliderQGB")
        self.VSliderQGB.setGeometry(QtCore.QRect(winW, 0, sliderW, winH))

        self.CursorY = []
        self.CursorY.append(doubleSlider())
        self.CursorY[0].setOrientation(QtCore.Qt.Vertical)
        self.CursorY[0].setObjectName("CursorY0")

        self.CursorY.append(doubleSlider())
        self.CursorY[1].setOrientation(QtCore.Qt.Vertical)
        self.CursorY[1].setObjectName("CursorY1")

        self.Trigger = doubleSlider()
        self.Trigger.setOrientation(QtCore.Qt.Vertical)
        self.Trigger.setObjectName("Trigger")

        self.VSliderGrid = QtWidgets.QHBoxLayout(self.VSliderQGB)
        self.VSliderGrid.setObjectName("VSliderGrid")
        self.VSliderGrid.addWidget(self.CursorY[0])
        self.VSliderGrid.addWidget(self.CursorY[1])
        self.VSliderGrid.addWidget(self.Trigger)

        self.FuncQGB = QtWidgets.QGroupBox(self.centralwidget)
        self.FuncQGB.setObjectName("FuncQGB")
        self.FuncQGB.setGeometry(QtCore.QRect(winW + sliderW, 0, funcW, funcH))

        self.RunButton = QtWidgets.QPushButton()
        self.RunButton.setObjectName("RunButton")

        # 水平时基调整
        self.tZoomLabel = QtWidgets.QLabel("时基")
        self.tZoomLabel.setObjectName("tZoomLabel")
        self.tZoomInput = logSpinBox()
        self.tZoomInput.setObjectName("tZoomInput")
        self.tZoomInput.setParameters(mi=0.125, ma=10, step=0.5, decimal=3)

        # 显示选项
        self.ModeLabel = QtWidgets.QLabel("模式")
        self.ModeSelect = QtWidgets.QComboBox()
        self.ModeLabel.setObjectName("ModeLabel")
        self.ModeSelect.setObjectName("Modeselect")
        self.ModeSelect.addItems(("水平", "XY"))

        # 测量面板
        self.CursorLabel = QtWidgets.QLabel("光标源")
        self.CursorLabel.setObjectName("CursorLabel")
        self.CursorSource = QtWidgets.QComboBox()
        self.CursorSource.setObjectName("CursorSource")
        self.CursorSource.addItems(("1", "2"))

        # 触发设置
        self.TriggerSourceLabel = QtWidgets.QLabel("触发源")
        self.TriggerSourceLabel.setObjectName("TriggerSourceLabel")
        self.TriggerSource = QtWidgets.QComboBox()
        self.TriggerSource.setObjectName("TriggerSource")
        self.TriggerSource.addItems(("1", "2"))
        self.TriggerSlopeLabel = QtWidgets.QLabel("边沿")
        self.TriggerSlopeLabel.setObjectName("TriggerSlopeLabel")
        self.TriggerSlopeSelect = QtWidgets.QComboBox()
        self.TriggerSlopeSelect.setObjectName("TriggerSlopeSelect")
        self.TriggerSlopeSelect.addItems(("上升", "下降"))

        # 通道控制
        (
            self.ChannelLabel,
            self.ZoomInput,
            self.OffsetInput,
        ) = ([], [], [])

        self.ChannelLabel.append(QtWidgets.QLabel("通道1"))
        self.ChannelLabel[0].setObjectName("ChannelLabel_1")

        self.ChannelLabel.append(QtWidgets.QLabel("通道2"))
        self.ChannelLabel[1].setObjectName("ChannelLabel_2")

        self.ZoomLabel = QtWidgets.QLabel("zoom")
        self.ZoomLabel.setObjectName("ZoomLabel")

        self.ZoomInput.append(logSpinBox())
        self.ZoomInput[0].setObjectName("ZoomInput_1")
        self.ZoomInput[0].setParameters(mi=0.01, ma=20, step=0.5, decimal=3)

        self.ZoomInput.append(logSpinBox())
        self.ZoomInput[1].setObjectName("ZoomInput_2")
        self.ZoomInput[1].setParameters(mi=0.01, ma=20, step=0.5, decimal=3)

        self.OffsetLabel = QtWidgets.QLabel("offset")
        self.OffsetLabel.setObjectName("OffsetLabel")

        self.OffsetInput.append(QtWidgets.QDoubleSpinBox())
        self.OffsetInput[0].setSingleStep(0.5)
        self.OffsetInput[0].setObjectName("OffsetInput_1")
        self.OffsetInput[0].setMinimum(-10)
        self.OffsetInput[0].setMaximum(10)

        self.OffsetInput.append(QtWidgets.QDoubleSpinBox())
        self.OffsetInput[1].setSingleStep(0.5)
        self.OffsetInput[1].setObjectName("OffsetInput_2")
        self.OffsetInput[1].setMinimum(-10)
        self.OffsetInput[1].setMaximum(10)

        self.FuncGrid = QtWidgets.QGridLayout(self.FuncQGB)
        self.FuncGrid.setObjectName("FuncGrid")
        self.FuncGrid.setAlignment(QtCore.Qt.AlignTop)
        self.FuncGrid.setVerticalSpacing(30)
        j = 1
        self.FuncGrid.addWidget(self.RunButton, 0, j + 1)
        self.FuncGrid.addWidget(self.ModeLabel, 1, j)
        self.FuncGrid.addWidget(self.ModeSelect, 1, j + 1)
        self.FuncGrid.addWidget(self.tZoomLabel, 2, j)
        self.FuncGrid.addWidget(self.tZoomInput, 2, j + 1)
        self.FuncGrid.addWidget(self.CursorLabel, 3, j)
        self.FuncGrid.addWidget(self.CursorSource, 3, j + 1)
        self.FuncGrid.addWidget(self.TriggerSourceLabel, 4, j)
        self.FuncGrid.addWidget(self.TriggerSource, 4, j + 1)
        self.FuncGrid.addWidget(self.TriggerSlopeLabel, 5, j)
        self.FuncGrid.addWidget(self.TriggerSlopeSelect, 5, j + 1)
        self.FuncGrid.setRowStretch(6, 1)
        i = 7
        self.FuncGrid.addWidget(self.ChannelLabel[0], i, 1)
        self.FuncGrid.addWidget(self.ChannelLabel[1], i, 2)
        self.FuncGrid.addWidget(self.ZoomLabel, i + 1, 0)
        self.FuncGrid.addWidget(self.ZoomInput[0], i + 1, 1)
        self.FuncGrid.addWidget(self.ZoomInput[1], i + 1, 2)
        self.FuncGrid.addWidget(self.OffsetLabel, i + 2, 0)
        self.FuncGrid.addWidget(self.OffsetInput[0], i + 2, 1)
        self.FuncGrid.addWidget(self.OffsetInput[1], i + 2, 2)

        self.FileQGB = QtWidgets.QGroupBox(self.centralwidget)
        self.FileQGB.setObjectName("FileQGB")
        self.FileQGB.setGeometry(
            QtCore.QRect(winW + sliderW, funcH, funcW, winH - funcH)
        )

        self.FilenameLabel = QtWidgets.QLabel("文件名")
        self.FilenameLabel.setObjectName("FilenameLabel")
        self.FormatLabel = QtWidgets.QLabel("格式")
        self.FormatLabel.setObjectName("FormatLabel")

        self.PicFileInput = QtWidgets.QLineEdit()
        self.PicFileInput.setObjectName("PicFileInput")
        self.PicFormat = QtWidgets.QComboBox()
        self.PicFormat.setObjectName("PicFormat")
        self.PicFormat.addItems((".png", ".jpg"))
        self.PicSaveButton = QtWidgets.QPushButton(text="保存图片")
        self.PicSaveButton.setObjectName("PicSaveButton")

        self.DataFileInput = QtWidgets.QLineEdit()
        self.DataFileInput.setObjectName("DataFileInput")
        self.DataFormat = QtWidgets.QComboBox()
        self.DataFormat.setObjectName("DataFormat")
        self.DataFormat.addItems((".npy", ".mat", ".wav"))
        self.DataSaveButton = QtWidgets.QPushButton(text="保存数据")
        self.DataSaveButton.setObjectName("DataSaveButton")

        self.RecordFileInput = QtWidgets.QLineEdit()
        self.RecordFileInput.setObjectName("RecordFileInput")
        self.RecordFormat = QtWidgets.QComboBox()
        self.RecordFormat.setObjectName("RecordFormat")
        self.RecordFormat.addItems((".npy", ".mat", ".wav"))
        self.RecordButton = QtWidgets.QPushButton(text="开始录音")
        self.RecordButton.setObjectName("RecordButton")

        self.FileGrid = QtWidgets.QGridLayout(self.FileQGB)
        self.FileGrid.setObjectName("FileGrid")
        self.FileGrid.setAlignment(QtCore.Qt.AlignTop)
        self.FileGrid.setRowStretch(0, 1)
        self.FileGrid.addWidget(self.FilenameLabel, 0, 0)
        self.FileGrid.addWidget(self.FormatLabel, 0, 1)
        self.FileGrid.addWidget(self.PicFileInput, 1, 0)
        self.FileGrid.addWidget(self.PicFormat, 1, 1)
        self.FileGrid.addWidget(self.PicSaveButton, 1, 2)
        self.FileGrid.addWidget(self.DataFileInput, 2, 0)
        self.FileGrid.addWidget(self.DataFormat, 2, 1)
        self.FileGrid.addWidget(self.DataSaveButton, 2, 2)
        self.FileGrid.addWidget(self.RecordFileInput, 3, 0)
        self.FileGrid.addWidget(self.RecordFormat, 3, 1)
        self.FileGrid.addWidget(self.RecordButton, 3, 2)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "示波器"))
        self.RunButton.setText(_translate("MainWindow", "Stop"))
        self.RunButton.setStyleSheet("background-color: red;")


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
